#include <stdio.h>

#define MAXN 100005

int u[MAXN], v[MAXN];
int deg[MAXN];
int ans[MAXN];
int used[MAXN];
int queue[MAXN], front, back;
int adj[MAXN][2], pos[MAXN];

int find_edge_id(int a, int b, int n) {
    for (int i = 0; i < n - 1; i++) {
        if ((u[i] == a && v[i] == b) || (u[i] == b && v[i] == a)) {
            return i;
        }
    }
    return -1;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n;
        scanf("%d", &n);

        for (int i = 1; i <= n; i++) {
            deg[i] = 0;
            used[i] = 0;
            pos[i] = 0;
        }

        for (int i = 0; i < n - 1; i++) {
            scanf("%d %d", &u[i], &v[i]);
            deg[u[i]]++;
            deg[v[i]]++;
            adj[u[i]][pos[u[i]]++] = v[i];
            adj[v[i]][pos[v[i]]++] = u[i];
        }

        int valid = 1;
        for (int i = 1; i <= n; i++) {
            if (deg[i] > 2) {
                valid = 0;
                break;
            }
        }

        if (!valid) {
            printf("-1\n");
            continue;
        }

        int start = 1;
        for (int i = 1; i <= n; i++) {
            if (deg[i] == 1) {
                start = i;
                break;
            }
        }

        front = back = 0;
        queue[back++] = start;
        used[start] = 1;

        int prev = -1;
        int cur_label = 2;

        while (front < back) {
            int node = queue[front++];

            for (int i = 0; i < pos[node]; i++) {
                int neighbor = adj[node][i];
                if (!used[neighbor]) {
                    used[neighbor] = 1;
                    queue[back++] = neighbor;

                    int eid = find_edge_id(node, neighbor, n);
                    ans[eid] = cur_label;

                    cur_label = (cur_label == 2 ? 5 : 2);
                }
            }
        }

        for (int i = 0; i < n - 1; i++) {
            printf("%d%c", ans[i], (i == n - 2 ? '\n' : ' '));
        }
    }

    return 0;
}

