#include <stdio.h>
#define MAXN 200005
#define int long long

int t, n;
int a[MAXN], b[MAXN], c[MAXN];
int pa[MAXN], pb[MAXN], pc[MAXN];

typedef struct {
    int l, r;
} Range;

Range A[MAXN], B[MAXN], C[MAXN];
int acnt, bcnt, ccnt;

int ceil_div(int x, int y) {
    return (x + y - 1) / y;
}

void build_prefix(int *arr, int *prefix) {
    prefix[0] = 0;
    for (int i = 1; i <= n; ++i)
        prefix[i] = prefix[i - 1] + arr[i];
}

int find_segments(int *p, Range *seg, int lim) {
    int l = 1, r = 1, cnt = 0;
    while (r <= n) {
        int sum = p[r] - p[l - 1];
        if (sum >= lim) {
            seg[cnt++] = (Range){l, r};
            l++;
            if (l > r) r = l;
        } else {
            r++;
        }
    }
    return cnt;
}

int check_disjoint(Range *A, int acnt, Range *B, int bcnt, Range *C, int ccnt, int *res) {
    for (int i = 0; i < acnt; ++i) {
        int la = A[i].l, ra = A[i].r;
        for (int j = 0; j < bcnt; ++j) {
            int lb = B[j].l, rb = B[j].r;
            if (rb < la || lb > ra) {
                for (int k = 0; k < ccnt; ++k) {
                    int lc = C[k].l, rc = C[k].r;
                    if ((rc < la || lc > ra) && (rc < lb || lc > rb)) {
                        res[0] = la; res[1] = ra;
                        res[2] = lb; res[3] = rb;
                        res[4] = lc; res[5] = rc;
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

int main() {
    scanf("%lld", &t);
    while (t--) {
        scanf("%lld", &n);
        int total = 0;
        for (int i = 1; i <= n; ++i) { scanf("%lld", &a[i]); total += a[i]; }
        for (int i = 1; i <= n; ++i) scanf("%lld", &b[i]);
        for (int i = 1; i <= n; ++i) scanf("%lld", &c[i]);

        int lim = ceil_div(total, 3);

        build_prefix(a, pa);
        build_prefix(b, pb);
        build_prefix(c, pc);

        acnt = find_segments(pa, A, lim);
        bcnt = find_segments(pb, B, lim);
        ccnt = find_segments(pc, C, lim);

        int res[6];
        int ok = 0;

        if (check_disjoint(A, acnt, B, bcnt, C, ccnt, res)) ok = 1;
        else if (check_disjoint(A, acnt, C, ccnt, B, bcnt, res)) ok = 1;
        else if (check_disjoint(B, bcnt, A, acnt, C, ccnt, res)) ok = 1;
        else if (check_disjoint(B, bcnt, C, ccnt, A, acnt, res)) ok = 1;
        else if (check_disjoint(C, ccnt, A, acnt, B, bcnt, res)) ok = 1;
        else if (check_disjoint(C, ccnt, B, bcnt, A, acnt, res)) ok = 1;

        if (ok)
            printf("%lld %lld %lld %lld %lld %lld\n", res[0], res[1], res[2], res[3], res[4], res[5]);
        else
            printf("-1\n");
    }
    return 0;
}

