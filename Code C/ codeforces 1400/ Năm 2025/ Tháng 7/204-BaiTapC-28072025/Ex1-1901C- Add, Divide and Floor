#include <stdio.h>
#include <stdlib.h>

#define LIMIT 200005
typedef long long ll;

ll *x_values;

int is_uniform(int *arr, int len) {
    for (int i = 1; i < len; ++i)
        if (arr[i] != arr[0])
            return 0;
    return 1;
}

void find_min_max(int *arr, int len, int *min_out, int *max_out) {
    int mn = arr[0], mx = arr[0];
    for (int i = 1; i < len; ++i) {
        if (arr[i] < mn) mn = arr[i];
        if (arr[i] > mx) mx = arr[i];
    }
    *min_out = mn;
    *max_out = mx;
}

void apply_operation(int *arr, int len, ll x) {
    for (int i = 0; i < len; ++i)
        arr[i] = (arr[i] + x) / 2;
}

int solve_case(int *arr, int len, ll *result_x) {
    int operations = 0;
    while (operations <= len) {
        if (is_uniform(arr, len))
            break;

        int mn, mx;
        find_min_max(arr, len, &mn, &mx);
        ll x = (ll)(mx - mn);
        result_x[operations++] = x;
        apply_operation(arr, len, x);
    }
    return operations;
}

int main() {
    int t;
    scanf("%d", &t);
    int *array = (int *)malloc(LIMIT * sizeof(int));
    x_values = (ll *)malloc(LIMIT * sizeof(ll));

    while (t--) {
        int n;
        scanf("%d", &n);

        for (int i = 0; i < n; ++i)
            scanf("%d", &array[i]);

        if (is_uniform(array, n)) {
            puts("0");
            continue;
        }

        int count = solve_case(array, n, x_values);

        printf("%d\n", count);
        if (count <= n) {
            for (int i = 0; i < count; ++i)
                printf("%lld%c", x_values[i], (i == count - 1) ? '\n' : ' ');
        }
    }

    free(array);
    free(x_values);
    return 0;
}

