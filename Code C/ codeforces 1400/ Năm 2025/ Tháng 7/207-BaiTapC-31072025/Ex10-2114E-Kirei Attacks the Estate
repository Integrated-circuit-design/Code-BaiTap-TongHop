#include <stdio.h>
#include <stdlib.h>

#define MAXN 200005
#define INF 1000000000

typedef struct {
    int v, next;
} Edge;

Edge edges[MAXN * 2];
int head[MAXN], edge_count;

int a[MAXN];
int threat[MAXN];
int n, t;

void add_edge(int u, int v) {
    edges[edge_count].v = v;
    edges[edge_count].next = head[u];
    head[u] = edge_count++;
}

void dfs(int u, int parent, int current_sum, int sign, int max_so_far) {
    current_sum = current_sum + sign * a[u];
    if (current_sum > max_so_far) max_so_far = current_sum;

    threat[u] = max_so_far;

    for (int i = head[u]; i != -1; i = edges[i].next) {
        int v = edges[i].v;
        if (v != parent) {
            dfs(v, u, current_sum, -sign, max_so_far);
        }
    }
}

void solve() {
    scanf("%d", &n);
    edge_count = 0;
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        head[i] = -1;
    }

    for (int i = 1; i < n; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        add_edge(u, v);
        add_edge(v, u);
    }

    dfs(1, 0, 0, 1, a[1]);

    for (int i = 1; i <= n; i++) {
        printf("%d%c", threat[i], (i == n ? '\n' : ' '));
    }
}

int main() {
    scanf("%d", &t);
    while (t--) {
        solve();
    }
    return 0;
}

