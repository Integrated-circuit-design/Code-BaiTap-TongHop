#include <stdio.h>
#include <stdlib.h>

int cmpInt(const void *a, const void *b) {
    int x = *(int*)a;
    int y = *(int*)b;
    if (x < y) return -1;
    if (x > y) return 1;
    return 0;
}

int main() {
    int n;
    scanf("%d", &n);

    int *arr = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int *sorted = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        sorted[i] = arr[i];
    }
    qsort(sorted, n, sizeof(int), cmpInt);

    int *pos = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        int left = 0, right = n - 1, mid;
        while (left <= right) {
            mid = (left + right) / 2;
            if (sorted[mid] == arr[i]) {
                pos[i] = mid;
                break;
            } else if (sorted[mid] < arr[i]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }

    int *group = (int*)malloc(n * sizeof(int));
    int group_count = 1;
    group[0] = 1;
    for (int i = 1; i < n; i++) {
        if (pos[i] == pos[i - 1] + 1) {
            group[i] = group_count;
        } else {
            group_count++;
            group[i] = group_count;
        }
    }

    int *size = (int*)calloc(group_count + 1, sizeof(int));
    for (int i = 0; i < n; i++) {
        size[group[i]]++;
    }

    int **subs = (int**)malloc((group_count + 1) * sizeof(int*));
    for (int i = 1; i <= group_count; i++) {
        subs[i] = (int*)malloc(size[i] * sizeof(int));
        size[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int g = group[i];
        subs[g][size[g]++] = i + 1;
    }

    printf("%d\n", group_count);
    for (int i = 1; i <= group_count; i++) {
        printf("%d", size[i]);
        for (int j = 0; j < size[i]; j++) {
            printf(" %d", subs[i][j]);
        }
        printf("\n");
    }

    for (int i = 1; i <= group_count; i++) free(subs[i]);
    free(subs);
    free(size);
    free(group);
    free(pos);
    free(sorted);
    free(arr);

    return 0;
}

