#include <stdio.h>
#include <math.h>

void find_two_smallest(int arr[], int n, int *a, int *b, int *index_a, int *index_b) {
    *a = *b = 1000000000;
    *index_a = *index_b = -1;

    for (int i = 0; i < n; i++) {
        if (arr[i] < *a) {
            *b = *a;
            *index_b = *index_a;
            *a = arr[i];
            *index_a = i;
        } else if (arr[i] < *b) {
            *b = arr[i];
            *index_b = i;
        }
    }
}

void reduce_array(int arr[], int *n, int index_a, int index_b, int new_value) {
    for (int i = index_a; i < *n - 1; i++) {
        arr[i] = arr[i + 1];
    }
    for (int i = index_b; i < *n - 2; i++) {
        arr[i] = arr[i + 1];
    }
    
    arr[*n - 2] = new_value;
    
    (*n)--;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n;
        scanf("%d", &n);

        int arr[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }

        int operations[n-1][2];
        int operation_count = 0;

        while (n > 1) {
            int a, b, index_a, index_b;
            
            find_two_smallest(arr, n, &a, &b, &index_a, &index_b);

            int new_value = (a + b + 1) / 2;

            operations[operation_count][0] = a;
            operations[operation_count][1] = b;
            operation_count++;

            reduce_array(arr, &n, index_a, index_b, new_value);
        }

        printf("%d\n", arr[0]);

        for (int i = 0; i < operation_count; i++) {
            printf("%d %d\n", operations[i][0], operations[i][1]);
        }
    }

    return 0;
}

