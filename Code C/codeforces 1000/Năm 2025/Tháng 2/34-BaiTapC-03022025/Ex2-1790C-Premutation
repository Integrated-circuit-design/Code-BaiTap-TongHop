#include <stdio.h>
#include <stdlib.h>

#define MAX_N 100

int find_missing_element(int n, int sequences[n][n-1]) {
    int sum = 0;
    int total_sum = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - 1; j++) {
            sum += sequences[i][j];
        }
    }

    total_sum = n * (n + 1) / 2;

    return total_sum - sum;
}

void reconstruct_permutation(int n, int sequences[n][n-1]) {
    int permutation[MAX_N];
    int missing = find_missing_element(n, sequences);

    permutation[0] = missing;

    int used[MAX_N + 1] = {0};
    used[missing] = 1;

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n - 1; k++) {
                int num = sequences[j][k];
                if (!used[num]) {
                    permutation[i] = num;
                    used[num] = 1;
                    break;
                }
            }
        }
    }

    for (int i = 0; i < n; i++) {
        printf("%d ", permutation[i]);
    }
    printf("\n");
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n;
        scanf("%d", &n);

        int sequences[n][n - 1];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                scanf("%d", &sequences[i][j]);
            }
        }

        reconstruct_permutation(n, sequences);
    }

    return 0;
}

