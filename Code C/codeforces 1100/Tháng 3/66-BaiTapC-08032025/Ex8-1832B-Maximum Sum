#include <stdio.h>
#include <stdlib.h>

#define MAX_N 200005

typedef struct {
    int data[MAX_N];
    int size;
} MinHeap;

void initHeap(MinHeap *heap) {
    heap->size = 0;
}

void push(MinHeap *heap, int value) {
    int i = heap->size++;
    while (i > 0) {
        int parent = (i - 1) / 2;
        if (heap->data[parent] <= value) break;
        heap->data[i] = heap->data[parent];
        i = parent;
    }
    heap->data[i] = value;
}

int pop(MinHeap *heap) {
    int result = heap->data[0];
    int value = heap->data[--heap->size];
    int i = 0;
    while (2 * i + 1 < heap->size) {
        int child = 2 * i + 1;
        if (child + 1 < heap->size && heap->data[child + 1] < heap->data[child]) {
            child++;
        }
        if (heap->data[child] >= value) break;
        heap->data[i] = heap->data[child];
        i = child;
    }
    heap->data[i] = value;
    return result;
}

void solve() {
    int n, k;
    scanf("%d %d", &n, &k);

    MinHeap heap;
    initHeap(&heap);

    long long sum = 0;
    
    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        push(&heap, x);
        sum += x;
    }

    for (int i = 0; i < k; i++) {
        sum -= pop(&heap);
        sum -= pop(&heap);
    }

    printf("%lld\n", sum);
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        solve();
    }
    return 0;
}

