#include <stdio.h>
#include <string.h>

#define MAX_N 200005

int largestRectangle(int heights[], int n) {
    int stack[MAX_N], top = -1, maxArea = 0;
    int left[MAX_N], right[MAX_N];

    for (int i = 0; i < n; i++) {
        while (top >= 0 && heights[stack[top]] >= heights[i]) top--;
        left[i] = (top == -1) ? 0 : (stack[top] + 1);
        stack[++top] = i;
    }

    top = -1;
    for (int i = n - 1; i >= 0; i--) {
        while (top >= 0 && heights[stack[top]] >= heights[i]) top--;
        right[i] = (top == -1) ? n - 1 : (stack[top] - 1);
        stack[++top] = i;
    }

    for (int i = 0; i < n; i++) {
        int area = heights[i] * (right[i] - left[i] + 1);
        if (area > maxArea) maxArea = area;
    }
    return maxArea;
}

void processTestCase() {
    char s[MAX_N];
    scanf("%s", s);
    int n = strlen(s);
    int heights[MAX_N] = {0};
    int maxArea = 0;

    for (int i = 0; i < n; i++) {
        heights[i] = (s[i] == '1') ? 1 : 0;
    }

    for (int shift = 0; shift < n; shift++) {
        for (int j = 0; j < n; j++) {
            if (s[(j - shift + n) % n] == '1') heights[j]++;
            else heights[j] = 0;
        }
        int area = largestRectangle(heights, n);
        if (area > maxArea) maxArea = area;
    }

    printf("%d\n", maxArea);
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        processTestCase();
    }
    return 0;
}

