#include <stdio.h>
#include <string.h>
#define MAX_PASSWORDS 100
#define MAX_PASSWORD_LENGTH 101
typedef struct {
   char password[MAX_PASSWORD_LENGTH];
   int length;
} PasswordEntry;
int main() {
   int n, k;
   scanf("%d %d", &n, &k);
   
   PasswordEntry passwords[MAX_PASSWORDS];
   char correct_password[MAX_PASSWORD_LENGTH];
   
   for (int i = 0; i < n; i++) {
       scanf("%s", passwords[i].password);
       passwords[i].length = strlen(passwords[i].password);
   }
   
   scanf("%s", correct_password);
   int correct_length = strlen(correct_password);
   
   int length_counts[MAX_PASSWORD_LENGTH] = {0};
   for (int i = 0; i < n; i++) {
       length_counts[passwords[i].length]++;
   }
   
   int passwords_before = 0;
   for (int length = 1; length < correct_length; length++) {
       passwords_before += length_counts[length];
   }
   
   int same_length_count = length_counts[correct_length];
   
   int correct_present = 0;
   for (int i = 0; i < n; i++) {
       if (strcmp(passwords[i].password, correct_password) == 0) {
           correct_present = 1;
           break;
       }
   }
   
   int best_attempts = passwords_before + 1;
   int best_delays = (k > 0) ? (passwords_before / k) : 0;
   int best_time = best_attempts + best_delays * 5;
   
   int worst_attempts = passwords_before + same_length_count;
   int worst_delays = (k > 0) ? ((worst_attempts - 1) / k) : 0;
   int worst_time = worst_attempts + worst_delays * 5;
   
   printf("%d %d\n", best_time, worst_time);
   
   return 0;
}
