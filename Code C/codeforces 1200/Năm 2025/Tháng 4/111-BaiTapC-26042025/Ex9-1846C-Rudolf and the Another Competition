#include <stdio.h>
#include <stdlib.h>

#define MAX_N 105
#define MAX_M 105

int compare_times(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

void calculate_results(int times[], int m, int h, int *points, long long *penalty) {
    int time_spent = 0;
    *points = 0;
    *penalty = 0;

    for (int i = 0; i < m; ++i) {
        if (time_spent + times[i] <= h) {
            time_spent += times[i];
            *penalty += time_spent;
            (*points)++;
        } else {
            break;
        }
    }
}

int compare_participants(const void *a, const void *b) {
    int *pa = (int*)a;
    int *pb = (int*)b;

    if (pa[0] != pb[0]) return pb[0] - pa[0];
    if (pa[1] != pb[1]) return pa[1] - pb[1];

    return 0;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n, m, h;
        scanf("%d %d %d", &n, &m, &h);

        int participants[MAX_N][2];

        for (int i = 0; i < n; ++i) {
            int times[MAX_M];

            for (int j = 0; j < m; ++j) {
                scanf("%d", &times[j]);
            }

            qsort(times, m, sizeof(int), compare_times);

            calculate_results(times, m, h, &participants[i][0], &participants[i][1]);
        }

        qsort(participants, n, sizeof(participants[0]), compare_participants);

        for (int i = 0; i < n; ++i) {
            if (i == 0) {
                printf("%d\n", i + 1);
                break;
            }
        }
    }

    return 0;
}

