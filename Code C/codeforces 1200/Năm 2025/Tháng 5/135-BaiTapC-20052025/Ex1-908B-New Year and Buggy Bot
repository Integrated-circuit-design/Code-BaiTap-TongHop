#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_N 50
#define MAX_M 50
#define MAX_S 100

int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

int canReachExit(int n, int m, char maze[MAX_N][MAX_M], int startX, int startY, int endX, int endY, char *instructions, int mapping[4]) {
    int x = startX, y = startY;
    
    for (int i = 0; instructions[i] != '\0'; i++) {
        int direction = instructions[i] - '0';
        
        int newX = x + dx[mapping[direction]];
        int newY = y + dy[mapping[direction]];
        
        if (newX < 0 || newX >= n || newY < 0 || newY >= m || maze[newX][newY] == '#') {
            return 0;
        }

        x = newX;
        y = newY;

        if (maze[x][y] == 'E') {
            return 1;
        }
    }

    return 0;
}

int main() {
    int n, m;
    char maze[MAX_N][MAX_M];
    int startX, startY, endX, endY;
    char instructions[MAX_S];

    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%s", maze[i]);

        for (int j = 0; j < m; j++) {
            if (maze[i][j] == 'S') {
                startX = i;
                startY = j;
            }
            if (maze[i][j] == 'E') {
                endX = i;
                endY = j;
            }
        }
    }

    scanf("%s", instructions);

    int directions[] = {0, 1, 2, 3};
    int validMappingCount = 0;

    do {
        if (canReachExit(n, m, maze, startX, startY, endX, endY, instructions, directions)) {
            validMappingCount++;
        }
    } while (next_permutation(directions, directions + 4));

    printf("%d\n", validMappingCount);

    return 0;
}

