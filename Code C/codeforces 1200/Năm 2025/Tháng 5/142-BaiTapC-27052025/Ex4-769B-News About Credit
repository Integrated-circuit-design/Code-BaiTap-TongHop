#include <stdio.h>
#include <stdbool.h>

#define MAX_N 100

typedef struct {
    int students[MAX_N];
    int front, rear;
} Queue;

void initQueue(Queue *q) {
    q->front = q->rear = 0;
}

void enqueue(Queue *q, int student) {
    q->students[q->rear++] = student;
}

int dequeue(Queue *q) {
    return q->students[q->front++];
}

int isEmpty(Queue *q) {
    return q->front == q->rear;
}

int main() {
    int n;
    scanf("%d", &n);

    int a[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    bool knows[n];
    int sent[n];
    Queue q;
    initQueue(&q);

    for (int i = 0; i < n; i++) {
        knows[i] = false;
        sent[i] = 0;
    }
    knows[0] = true;
    enqueue(&q, 0);

    int message_count = 0;
    int messages[MAX_N * MAX_N][2];

    while (!isEmpty(&q)) {
        int sender = dequeue(&q);
        for (int receiver = 0; receiver < n; receiver++) {
            if (!knows[receiver] && sent[sender] < a[sender]) {
                knows[receiver] = true;
                sent[sender]++;
                messages[message_count][0] = sender + 1;
                messages[message_count][1] = receiver + 1;
                message_count++;
                enqueue(&q, receiver);
            }
        }
    }

    for (int i = 0; i < n; i++) {
        if (!knows[i]) {
            printf("-1\n");
            return 0;
        }
    }

    printf("%d\n", message_count);
    for (int i = 0; i < message_count; i++) {
        printf("%d %d\n", messages[i][0], messages[i][1]);
    }

    return 0;
}

