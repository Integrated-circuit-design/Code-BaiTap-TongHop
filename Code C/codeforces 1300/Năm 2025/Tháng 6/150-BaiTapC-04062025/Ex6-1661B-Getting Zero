#include <stdio.h>
#include <stdlib.h>

#define MOD 32768

typedef struct {
    int *data;
    int front, rear, size, capacity;
} Queue;

Queue* createQueue(int capacity) {
    Queue *q = (Queue*)malloc(sizeof(Queue));
    q->data = (int*)malloc(capacity * sizeof(int));
    q->front = 0;
    q->rear = 0;
    q->size = 0;
    q->capacity = capacity;
    return q;
}

void enqueue(Queue *q, int val) {
    q->data[q->rear] = val;
    q->rear = (q->rear + 1) % q->capacity;
    q->size++;
}

int dequeue(Queue *q) {
    int val = q->data[q->front];
    q->front = (q->front + 1) % q->capacity;
    q->size--;
    return val;
}

int isEmpty(Queue *q) {
    return q->size == 0;
}

int bfs_min_steps(int start) {
    int dist[MOD];
    for (int i = 0; i < MOD; i++)
        dist[i] = -1;
    
    Queue *q = createQueue(MOD);

    dist[start] = 0;
    enqueue(q, start);

    while (!isEmpty(q)) {
        int v = dequeue(q);
        if (v == 0) {
            free(q->data);
            free(q);
            return dist[v];
        }

        int next1 = (v + 1) % MOD;
        int next2 = (v * 2) % MOD;

        if (dist[next1] == -1) {
            dist[next1] = dist[v] + 1;
            enqueue(q, next1);
        }

        if (dist[next2] == -1) {
            dist[next2] = dist[v] + 1;
            enqueue(q, next2);
        }
    }

    free(q->data);
    free(q);
    return -1;
}

int main() {
    int n;
    scanf("%d", &n);

    int a[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    for (int i = 0; i < n; i++) {
        int steps = bfs_min_steps(a[i]);
        printf("%d ", steps);
    }
    printf("\n");

    return 0;
}

