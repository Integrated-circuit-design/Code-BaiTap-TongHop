#include <stdio.h>
#include <stdlib.h>

typedef long long ll;

typedef struct {
    ll val;
    int freq;
} Item;

int cmp_val(const void *a, const void *b) {
    Item *ia = (Item*)a;
    Item *ib = (Item*)b;
    if (ia->val < ib->val) return -1;
    if (ia->val > ib->val) return 1;
    return 0;
}

int cmp_ll(const void *a, const void *b) {
    ll x = *(ll*)a;
    ll y = *(ll*)b;
    if (x < y) return -1;
    if (x > y) return 1;
    return 0;
}

int find(Item *items, int size, ll val) {
    for (int i = 0; i < size; i++) {
        if (items[i].val == val) return i;
    }
    return -1;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n, k;
        scanf("%d %d", &n, &k);

        ll *a = (ll*) malloc(n * sizeof(ll));
        for (int i = 0; i < n; i++) {
            scanf("%lld", &a[i]);
        }

        Item *items = (Item*) malloc(n * sizeof(Item));
        int size = 0;

        for (int i = 0; i < n; i++) {
            int idx = find(items, size, a[i]);
            if (idx == -1) {
                items[size].val = a[i];
                items[size].freq = 1;
                size++;
            } else {
                items[idx].freq++;
            }
        }

        ll *valid = (ll*) malloc(size * sizeof(ll));
        int validCount = 0;
        for (int i = 0; i < size; i++) {
            if (items[i].freq >= k) {
                valid[validCount++] = items[i].val;
            }
        }

        if (validCount == 0) {
            printf("-1\n");
            free(a);
            free(items);
            free(valid);
            continue;
        }

        qsort(valid, validCount, sizeof(ll), cmp_ll);

        int max_len = 1;
        int cur_len = 1;
        ll best_l = valid[0], best_r = valid[0];
        ll start = valid[0];

        for (int i = 1; i < validCount; i++) {
            if (valid[i] == valid[i - 1] + 1) {
                cur_len++;
            } else {
                if (cur_len > max_len) {
                    max_len = cur_len;
                    best_l = start;
                    best_r = valid[i - 1];
                }
                start = valid[i];
                cur_len = 1;
            }
        }

        if (cur_len > max_len) {
            max_len = cur_len;
            best_l = start;
            best_r = valid[validCount - 1];
        }

        printf("%lld %lld\n", best_l, best_r);

        free(a);
        free(items);
        free(valid);
    }

    return 0;
}

