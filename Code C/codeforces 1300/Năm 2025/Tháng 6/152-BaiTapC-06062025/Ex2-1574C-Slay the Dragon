#include <stdio.h>
#include <stdlib.h>

typedef long long ll;

int binary_search_first_ge(ll arr[], int n, ll key) {
    int left = 0, right = n - 1;
    int ans = n;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] >= key) {
            ans = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return ans;
}

int cmpfunc(const void *a, const void *b) {
    ll x = *(ll*)a;
    ll y = *(ll*)b;
    if (x < y) return -1;
    else if (x > y) return 1;
    else return 0;
}

int main() {
    int n; 
    scanf("%d", &n);

    ll* heroes = (ll*)malloc(n * sizeof(ll));
    for (int i = 0; i < n; i++) {
        scanf("%lld", &heroes[i]);
    }

    qsort(heroes, n, sizeof(ll), cmpfunc);

    ll total_strength = 0;
    for (int i = 0; i < n; i++) {
        total_strength += heroes[i];
    }

    int m;
    scanf("%d", &m);

    for (int i = 0; i < m; i++) {
        ll x, y;
        scanf("%lld %lld", &x, &y);

        int pos = binary_search_first_ge(heroes, n, x);

        ll res = 1e18;

        if (pos < n) {
            ll hero = heroes[pos];
            ll defend = total_strength - hero;
            ll cost = 0;
            if (defend < y) cost = y - defend;
            if (cost < res) res = cost;
        }

        if (pos > 0) {
            ll hero = heroes[pos - 1];
            ll defend = total_strength - hero;
            ll cost = (x - hero);
            if (defend < y) cost += y - defend;
            if (cost < res) res = cost;
        }

        printf("%lld\n", res);
    }

    free(heroes);
    return 0;
}

