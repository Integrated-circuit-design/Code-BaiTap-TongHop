#include <stdio.h>
#include <stdlib.h>

typedef long long ll;

typedef struct {
    ll powerNeeded;
    int countMonsters;
} Dungeon;

int dungeonCompare(const void *p1, const void *p2) {
    Dungeon *d1 = (Dungeon *)p1;
    Dungeon *d2 = (Dungeon *)p2;

    if (d1->powerNeeded < d2->powerNeeded) return -1;
    if (d1->powerNeeded > d2->powerNeeded) return 1;
    return 0;
}

int main() {
    int T;
    scanf("%d", &T);

    while (T--) {
        int n;
        scanf("%d", &n);

        Dungeon *dungeons = (Dungeon *)malloc(n * sizeof(Dungeon));
        for (int i = 0; i < n; i++) {
            int k;
            scanf("%d", &k);
            ll *armors = (ll *)malloc(k * sizeof(ll));
            for (int j = 0; j < k; j++) {
                scanf("%lld", &armors[j]);
            }

            ll maxDiff = armors[0];
            for (int j = 0; j < k; j++) {
                ll diff = armors[j] - j;
                if (diff > maxDiff) maxDiff = diff;
            }

            dungeons[i].powerNeeded = maxDiff;
            dungeons[i].countMonsters = k;
            free(armors);
        }

        qsort(dungeons, n, sizeof(Dungeon), dungeonCompare);

        ll minInitialPower = 0;
        ll powerGained = 0;

        for (int i = 0; i < n; i++) {
            ll requiredPower = dungeons[i].powerNeeded - powerGained + 1;
            if (requiredPower > minInitialPower) {
                minInitialPower = requiredPower;
            }
            powerGained += dungeons[i].countMonsters;
        }

        printf("%lld\n", minInitialPower);

        free(dungeons);
    }

    return 0;
}

