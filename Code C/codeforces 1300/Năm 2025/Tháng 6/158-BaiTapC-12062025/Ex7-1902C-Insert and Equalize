#include <stdio.h>
#include <stdlib.h>

long long gcd(long long a, long long b) {
    if (b == 0)
        return a > 0 ? a : -a;
    return gcd(b, a % b);
}

int main() {
    int T;
    scanf("%d", &T);

    while (T--) {
        int n;
        scanf("%d", &n);
        long long *arr = (long long*)malloc(sizeof(long long) * n);

        long long max_val = -10000000000LL;
        for (int i = 0; i < n; i++) {
            scanf("%lld", &arr[i]);
            if (arr[i] > max_val) max_val = arr[i];
        }

        long long current_gcd = 0;
        for (int i = 0; i < n; i++) {
            long long diff = max_val - arr[i];
            if (diff < 0) diff = -diff;
            if (current_gcd == 0)
                current_gcd = diff;
            else
                current_gcd = gcd(current_gcd, diff);
        }

        long long operations = 0;
        for (int i = 0; i < n; i++) {
            operations += (max_val - arr[i]) / current_gcd;
        }
        operations++;

        printf("%lld\n", operations);

        free(arr);
    }

    return 0;
}

