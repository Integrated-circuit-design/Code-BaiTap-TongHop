```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct {
    int start;
    int right;
    int left;
} ChipMove;

char* execute_moves(char* source, ChipMove move) {
    int n = strlen(source);
    char* result = malloc(2 * n * sizeof(char));
    int write_pos = 0;
    
    result[write_pos++] = source[move.start];
    
    int current_pos = move.start;
    for (int i = 0; i < move.right; i++) {
        current_pos++;
        result[write_pos++] = source[current_pos];
    }
    
    for (int i = 0; i < move.left; i++) {
        current_pos--;
        result[write_pos++] = source[current_pos];
    }
    
    result[write_pos] = '\0';
    return result;
}

int is_valid_move(int n, ChipMove move) {
    if (move.start < 0 || move.start >= n) return 0;
    if (move.start + move.right >= n) return 0;
    if (move.start + move.right - move.left < 0) return 0;
    return 1;
}

int solve_case(char* s, char* t) {
    int n = strlen(s);
    
    for (int start = 0; start < n; start++) {
        for (int right = 0; right <= n - 1 - start; right++) {
            for (int left = 0; left <= start + right; left++) {
                
                ChipMove move = {start, right, left};
                
                if (is_valid_move(n, move)) {
                    char* generated = execute_moves(s, move);
                    
                    int match = (strcmp(generated, t) == 0);
                    free(generated);
                    
                    if (match) return 1;
                }
            }
        }
    }
    return 0;
}

int main() {
    int q;
    scanf("%d", &q);
    
    while (q--) {
        char s[501], t[1001];
        scanf("%s %s", s, t);
        
        printf("%s\n", solve_case(s, t) ? "YES" : "NO");
    }
    
    return 0;
}
```
