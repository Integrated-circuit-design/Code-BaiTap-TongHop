#include <stdio.h>
#include <stdlib.h>

#define ll long long

int cmp(const void *a, const void *b) {
    int x = *(int *)a;
    int y = *(int *)b;
    return (x > y) - (x < y);
}

int count_occurrences(int *arr, int n, int key) {
    int *lower = (int *)bsearch(&key, arr, n, sizeof(int), cmp);
    if (!lower) return 0;

    int idx = lower - arr;
    int count = 1;

    int i = idx + 1;
    while (i < n && arr[i] == key) {
        count++;
        i++;
    }

    i = idx - 1;
    while (i >= 0 && arr[i] == key) {
        count++;
        i--;
    }

    return count;
}

int main() {
    int n;
    scanf("%d", &n);

    int *diag1 = (int *)malloc(n * sizeof(int));
    int *diag2 = (int *)malloc(n * sizeof(int));

    for (int i = 0; i < n; ++i) {
        int x, y;
        scanf("%d %d", &x, &y);
        diag1[i] = x - y;
        diag2[i] = x + y;
    }

    qsort(diag1, n, sizeof(int), cmp);
    qsort(diag2, n, sizeof(int), cmp);

    ll result = 0;

    for (int i = 0; i < n;) {
        int key = diag1[i];
        int count = count_occurrences(diag1, n, key);
        if (count >= 2) {
            result += 1LL * count * (count - 1) / 2;
        }
        i += count;
    }

    for (int i = 0; i < n;) {
        int key = diag2[i];
        int count = count_occurrences(diag2, n, key);
        if (count >= 2) {
            result += 1LL * count * (count - 1) / 2;
        }
        i += count;
    }

    printf("%lld\n", result);

    free(diag1);
    free(diag2);
    return 0;
}

