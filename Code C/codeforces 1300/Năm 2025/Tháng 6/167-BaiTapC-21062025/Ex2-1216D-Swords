#include <stdio.h>
#include <stdlib.h>

#define MAXN 200005

int a[MAXN];
int diffs[MAXN], diff_cnt = 0;

int gcd(int a, int b) {
    while (b) {
        int r = a % b;
        a = b;
        b = r;
    }
    return a;
}

int get_divisors(int num, int *arr) {
    int count = 0;
    for (int i = 1; i * i <= num; i++) {
        if (num % i == 0) {
            arr[count++] = i;
            if (i != num / i)
                arr[count++] = num / i;
        }
    }
    return count;
}

int main() {
    int n;
    scanf("%d", &n);

    int max_val = 0, min_val = 1000000000;

    for (int i = 0; i < n; ++i) {
        scanf("%d", &a[i]);
        if (a[i] > max_val) max_val = a[i];
        if (a[i] < min_val) min_val = a[i];
    }

    for (int i = 0; i < n; ++i) {
        if (a[i] != max_val) {
            diffs[diff_cnt++] = max_val - a[i];
        }
    }

    int all_z[400000], z_cnt = 0;

    if (diff_cnt == 0) {
        printf("0 1\n");
        return 0;
    }

    int g = diffs[0];
    for (int i = 1; i < diff_cnt; ++i)
        g = gcd(g, diffs[i]);

    z_cnt = get_divisors(g, all_z);

    long long min_y = 1LL << 60;
    int best_z = 1;

    for (int i = 0; i < z_cnt; ++i) {
        int z = all_z[i];
        long long total = 0;
        int ok = 1;

        for (int j = 0; j < n; ++j) {
            if ((max_val - a[j]) % z != 0) {
                ok = 0;
                break;
            }
            total += (max_val - a[j]) / z;
        }

        if (ok && total < min_y) {
            min_y = total;
            best_z = z;
        }
    }

    printf("%lld %d\n", min_y, best_z);
    return 0;
}

