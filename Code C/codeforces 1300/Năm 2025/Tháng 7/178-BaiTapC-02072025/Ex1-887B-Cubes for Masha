#include <stdio.h>

int n;
int cubes[3][10];

int can_make_1_digit(int d) {
    for (int i = 0; i < n; i++)
        if (cubes[i][d]) return 1;
    return 0;
}

int can_make_2_digits(int d1, int d2) {
    for (int i = 0; i < n; i++) {
        if (!cubes[i][d1]) continue;
        for (int j = 0; j < n; j++) {
            if (j == i) continue;
            if (cubes[j][d2]) return 1;
        }
    }
    return 0;
}

int can_make_3_digits(int d1, int d2, int d3) {
    for (int i = 0; i < n; i++) {
        if (!cubes[i][d1]) continue;
        for (int j = 0; j < n; j++) {
            if (j == i || !cubes[j][d2]) continue;
            for (int k = 0; k < n; k++) {
                if (k == i || k == j) continue;
                if (cubes[k][d3]) return 1;
            }
        }
    }
    return 0;
}

int can_form(int x) {
    if (x < 10) return can_make_1_digit(x);

    int d1 = x / 10;
    int d2 = x % 10;

    if (x < 100) return can_make_2_digits(d1, d2);

    int a = x / 100;
    int b = (x / 10) % 10;
    int c = x % 10;

    return can_make_3_digits(a, b, c);
}

int main() {
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 10; j++) cubes[i][j] = 0;

        for (int j = 0; j < 6; j++) {
            int d;
            scanf("%d", &d);
            cubes[i][d] = 1;
        }
    }

    for (int x = 1; x <= 999; x++) {
        if (!can_form(x)) {
            printf("%d\n", x - 1);
            return 0;
        }
    }

    printf("999\n");
    return 0;
}

