#include <stdio.h>
#include <string.h>

#define MAX 55

int n, m;
char grid[MAX][MAX];
int used[MAX][MAX];

int is_same_column_set(int a[], int b[], int len) {
    for (int i = 0; i < len; ++i)
        if (a[i] != b[i])
            return 0;
    return 1;
}

int arrays_intersect(int a[], int na, int b[], int nb) {
    int i = 0, j = 0;
    while (i < na && j < nb) {
        if (a[i] == b[j]) return 1;
        if (a[i] < b[j]) ++i;
        else ++j;
    }
    return 0;
}

int main() {
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i)
        scanf("%s", grid[i]);

    int group_count = 0;
    int group_cols[MAX][MAX];
    int group_len[MAX];

    for (int i = 0; i < n; ++i) {
        int cols[MAX], len = 0;
        for (int j = 0; j < m; ++j)
            if (grid[i][j] == '#')
                cols[len++] = j;

        if (len == 0) continue;

        for (int x = 0; x < len; ++x)
            for (int y = x + 1; y < len; ++y)
                if (cols[x] > cols[y]) {
                    int tmp = cols[x];
                    cols[x] = cols[y];
                    cols[y] = tmp;
                }

        int found = 0;
        for (int g = 0; g < group_count; ++g) {
            if (group_len[g] == len && is_same_column_set(group_cols[g], cols, len)) {
                found = 1;
                break;
            }
        }

        if (!found) {
            for (int g = 0; g < group_count; ++g) {
                if (arrays_intersect(group_cols[g], group_len[g], cols, len)) {
                    printf("No\n");
                    return 0;
                }
            }
            for (int x = 0; x < len; ++x)
                group_cols[group_count][x] = cols[x];
            group_len[group_count] = len;
            group_count++;
        }
    }

    printf("Yes\n");
    return 0;
}

