#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#define MAX_LEN 1005

void mark_primes(bool prime[], int n) {
    for (int i = 0; i <= n; i++)
        prime[i] = true;
    prime[0] = prime[1] = false;
    for (int i = 2; i * i <= n; i++) {
        if (prime[i]) {
            for (int j = i * i; j <= n; j += i)
                prime[j] = false;
        }
    }
}

int get_max_char(int freq[26]) {
    int max = 0;
    for (int i = 1; i < 26; i++) {
        if (freq[i] > freq[max])
            max = i;
    }
    return max;
}

int build_core_positions(bool prime[], bool core[], int len) {
    int count = 0;
    for (int p = 2; p <= len; p++) {
        if (prime[p]) {
            for (int i = 1; i * p <= len; i++) {
                int pos = i * p - 1;
                if (!core[pos]) {
                    core[pos] = true;
                    count++;
                }
            }
        }
    }
    return count;
}

void fill_result(char *result, int len, bool core[], int freq[26], int maxc) {
    int cur = 0;
    for (int i = 0; i < len; i++) {
        if (core[i]) {
            result[i] = 'a' + maxc;
            freq[maxc]--;
        }
    }
    for (int i = 0; i < len; i++) {
        if (result[i] == 0) {
            while (freq[cur] == 0) cur++;
            result[i] = 'a' + cur;
            freq[cur]--;
        }
    }
    result[len] = '\0';
}

int main() {
    char input[MAX_LEN], result[MAX_LEN];
    int freq[26] = {0};
    bool prime[MAX_LEN], core[MAX_LEN] = {0};

    scanf("%s", input);
    int len = strlen(input);

    for (int i = 0; i < len; i++)
        freq[input[i] - 'a']++;

    mark_primes(prime, len);
    int core_count = build_core_positions(prime, core, len);

    int maxc = get_max_char(freq);
    if (freq[maxc] < core_count) {
        printf("NO\n");
        return 0;
    }

    fill_result(result, len, core, freq, maxc);

    printf("YES\n%s\n", result);
    return 0;
}

