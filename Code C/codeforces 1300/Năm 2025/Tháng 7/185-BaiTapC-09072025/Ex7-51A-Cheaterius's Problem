#include <stdio.h>

#define MAX 1000

int n;
int amulets[MAX][4];
int piles = 0;

int isSame(int a[4], int b[4]) {
    for (int i = 0; i < 4; ++i)
        if (a[i] != b[i]) return 0;
    return 1;
}

void normalize(int a[4], int out[4]) {
    int rot[4][4];
    rot[0][0] = a[0]; rot[0][1] = a[1]; rot[0][2] = a[3]; rot[0][3] = a[2];
    rot[1][0] = a[2]; rot[1][1] = a[0]; rot[1][2] = a[1]; rot[1][3] = a[3];
    rot[2][0] = a[3]; rot[2][1] = a[2]; rot[2][2] = a[0]; rot[2][3] = a[1];
    rot[3][0] = a[1]; rot[3][1] = a[3]; rot[3][2] = a[2]; rot[3][3] = a[0];

    int minIdx = 0;
    for (int i = 1; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            if (rot[i][j] < rot[minIdx][j]) {
                minIdx = i;
                break;
            } else if (rot[i][j] > rot[minIdx][j]) break;
        }
    }

    for (int i = 0; i < 4; ++i)
        out[i] = rot[minIdx][i];
}

int main() {
    scanf("%d", &n);

    int current[4];
    char top[3], bottom[3], sep[3];
    int unique[MAX][4];
    
    for (int i = 0; i < n; ++i) {
        scanf("%s", top);
        scanf("%s", bottom);
        
        current[0] = top[0] - '0';
        current[1] = top[1] - '0';
        current[2] = bottom[0] - '0';
        current[3] = bottom[1] - '0';

        int norm[4];
        normalize(current, norm);

        int found = 0;
        for (int j = 0; j < piles; ++j) {
            if (isSame(norm, unique[j])) {
                found = 1;
                break;
            }
        }

        if (!found) {
            for (int k = 0; k < 4; ++k)
                unique[piles][k] = norm[k];
            piles++;
        }

        if (i < n - 1) scanf("%s", sep);
    }

    printf("%d\n", piles);
    return 0;
}

