#include <stdio.h>

unsigned int bits_to_mask(const int bits[], int n) {
    unsigned int mask = 0;
    for (int i = 0; i < n; i++) {
        if (bits[i]) {
            mask |= (1U << i);
        }
    }
    return mask;
}

int distinguish_state_bitmask(const int measured[], const int bits0[], const int bits1[], int n) {
    unsigned int m_mask = bits_to_mask(measured, n);
    unsigned int b0_mask = bits_to_mask(bits0, n);
    unsigned int b1_mask = bits_to_mask(bits1, n);

    if (m_mask == b0_mask) {
        return 0;
    } else if (m_mask == b1_mask) {
        return 1;
    } else {
        return -1;
    }
}

int main() {
    int n = 4;

    int bits0[] = {1, 0, 1, 0};
    int bits1[] = {0, 1, 1, 0};
    int measured[] = {1, 0, 1, 0};

    int res = distinguish_state_bitmask(measured, bits0, bits1, n);
    if (res == 0) {
        printf("Measured state matches bits0 (return 0)\n");
    } else if (res == 1) {
        printf("Measured state matches bits1 (return 1)\n");
    } else {
        printf("Measured state does not match bits0 or bits1\n");
    }

    return 0;
}

