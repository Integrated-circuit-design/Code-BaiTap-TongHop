#include <stdio.h>

#define MAXN 100005
#define MAXM 200005

int n, k;
int mains[MAXN], need[MAXN];
int adjHead[MAXN], adjNext[MAXM], adjTo[MAXM], adjCnt = 0;
int revHead[MAXN], revNext[MAXM], revTo[MAXM], revCnt = 0;
int state[MAXN];
int topo[MAXN], tcnt = 0;
int cycle = 0;

void addEdge(int u, int v) {
    adjTo[adjCnt] = v;
    adjNext[adjCnt] = adjHead[u];
    adjHead[u] = adjCnt++;
}

void addRev(int v, int u) {
    revTo[revCnt] = u;
    revNext[revCnt] = revHead[v];
    revHead[v] = revCnt++;
}

void collect(int u) {
    if (need[u]) return;
    need[u] = 1;
    for (int e = revHead[u]; e != -1; e = revNext[e]) {
        collect(revTo[e]);
    }
}

void dfsTopo(int u) {
    state[u] = 1;
    for (int e = adjHead[u]; e != -1; e = adjNext[e]) {
        int v = adjTo[e];
        if (!need[v]) continue;
        if (state[v] == 0) dfsTopo(v);
        else if (state[v] == 1) cycle = 1;
    }
    state[u] = 2;
    topo[tcnt++] = u;
}

int main() {
    scanf("%d %d", &n, &k);
    for (int i = 0; i < k; i++) scanf("%d", &mains[i]);

    for (int i = 1; i <= n; i++) adjHead[i] = revHead[i] = -1;

    for (int i = 1; i <= n; i++) {
        int t; scanf("%d", &t);
        for (int j = 0; j < t; j++) {
            int x; scanf("%d", &x);
            addEdge(x, i);
            addRev(i, x);
        }
    }

    for (int i = 0; i < k; i++) collect(mains[i]);

    for (int i = 1; i <= n; i++) {
        if (need[i] && state[i] == 0)
            dfsTopo(i);
    }

    if (cycle) {
        printf("-1\n");
        return 0;
    }

    printf("%d\n", tcnt);
    for (int i = tcnt - 1; i >= 0; i--) {
        printf("%d%c", topo[i], (i == 0) ? '\n' : ' ');
    }
    return 0;
}

