#include <stdio.h>
#include <stdlib.h>

#define MAXN 4
long long a[16], mat[4][4];
int n;
long long target;

int next_permutation(long long *arr, int len) {
    int i = len - 2;
    while (i >= 0 && arr[i] >= arr[i + 1]) i--;
    if (i < 0) return 0;
    int j = len - 1;
    while (arr[j] <= arr[i]) j--;
    long long tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    for (int l = i + 1, r = len - 1; l < r; l++, r--) {
        tmp = arr[l];
        arr[l] = arr[r];
        arr[r] = tmp;
    }
    return 1;
}

int is_magic() {
    long long sum, diag1 = 0, diag2 = 0;
    for (int i = 0; i < n; i++) diag1 += mat[i][i];
    for (int i = 0; i < n; i++) diag2 += mat[i][n - 1 - i];
    if (diag1 != target || diag2 != target) return 0;
    for (int i = 0; i < n; i++) {
        sum = 0;
        for (int j = 0; j < n; j++) sum += mat[i][j];
        if (sum != target) return 0;
    }
    for (int j = 0; j < n; j++) {
        sum = 0;
        for (int i = 0; i < n; i++) sum += mat[i][j];
        if (sum != target) return 0;
    }
    return 1;
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n * n; i++) scanf("%lld", &a[i]);
    long long sum = 0;
    for (int i = 0; i < n * n; i++) sum += a[i];
    target = sum / n;
    for (int i = 0; i < n * n - 1; i++)
        for (int j = i + 1; j < n * n; j++)
            if (a[i] > a[j]) { long long t = a[i]; a[i] = a[j]; a[j] = t; }
    do {
        int k = 0;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                mat[i][j] = a[k++];
        if (is_magic()) {
            printf("%lld\n", target);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++)
                    printf("%lld%c", mat[i][j], j == n - 1 ? '\n' : ' ');
            }
            return 0;
        }
    } while (next_permutation(a, n * n));
    return 0;
}

