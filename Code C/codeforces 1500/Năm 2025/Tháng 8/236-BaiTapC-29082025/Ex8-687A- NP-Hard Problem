#include <stdio.h>
#include <stdlib.h>

#define MAXN 100005
#define MAXM 200005

int head[MAXN], to[MAXM], nxt[MAXM], edge_cnt = 0;
int color[MAXN];
int q[MAXN];
int A[MAXN], B[MAXN];
int cntA = 0, cntB = 0;

void add_edge(int u, int v) {
    to[edge_cnt] = v;
    nxt[edge_cnt] = head[u];
    head[u] = edge_cnt++;
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    for (int i = 1; i <= n; i++) head[i] = -1;

    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        add_edge(u, v);
        add_edge(v, u);
    }

    for (int i = 1; i <= n; i++) color[i] = -1;

    for (int start = 1; start <= n; start++) {
        if (color[start] != -1) continue;
        if (head[start] == -1) continue;

        int front = 0, back = 0;
        q[back++] = start;
        color[start] = 0;

        while (front < back) {
            int u = q[front++];

            if (color[u] == 0) A[cntA++] = u;
            else B[cntB++] = u;

            for (int e = head[u]; e != -1; e = nxt[e]) {
                int v = to[e];
                if (color[v] == -1) {
                    color[v] = color[u] ^ 1;
                    q[back++] = v;
                } else if (color[v] == color[u]) {
                    printf("-1\n");
                    return 0;
                }
            }
        }
    }

    printf("%d\n", cntA);
    for (int i = 0; i < cntA; i++) {
        if (i) printf(" ");
        printf("%d", A[i]);
    }
    printf("\n");

    printf("%d\n", cntB);
    for (int i = 0; i < cntB; i++) {
        if (i) printf(" ");
        printf("%d", B[i]);
    }
    printf("\n");

    return 0;
}

