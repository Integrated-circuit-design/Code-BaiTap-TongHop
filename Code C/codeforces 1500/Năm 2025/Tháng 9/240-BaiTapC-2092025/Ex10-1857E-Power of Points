#include <stdio.h>
#include <stdlib.h>

typedef long long ll;

int cmp(const void *a, const void *b) {
    ll x = *(ll*)a;
    ll y = *(ll*)b;
    return (x > y) - (x < y);
}

int lower_bound(ll *arr, int n, ll val) {
    int l = 0, r = n-1, ans = n;
    while (l <= r) {
        int mid = (l + r) / 2;
        if (arr[mid] >= val) {
            ans = mid;
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    return ans;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);

        ll *x = (ll*)malloc(n * sizeof(ll));
        for (int i = 0; i < n; i++) scanf("%lld", &x[i]);

        ll *sorted = (ll*)malloc(n * sizeof(ll));
        for (int i = 0; i < n; i++) sorted[i] = x[i];
        qsort(sorted, n, sizeof(ll), cmp);

        ll *pref = (ll*)malloc((n+1) * sizeof(ll));
        pref[0] = 0;
        for (int i = 0; i < n; i++) pref[i+1] = pref[i] + sorted[i];

        for (int i = 0; i < n; i++) {
            ll s = x[i];
            int k = lower_bound(sorted, n, s);
            while (k < n && sorted[k] != s) k++;
            ll left = s * (k+1LL) - pref[k+1];
            ll right = (pref[n] - pref[k+1]) - s * (n - (k+1LL));
            ll ans = n + left + right;
            printf("%lld%c", ans, (i == n-1 ? '\n' : ' '));
        }

        free(x);
        free(sorted);
        free(pref);
    }
    return 0;
}

