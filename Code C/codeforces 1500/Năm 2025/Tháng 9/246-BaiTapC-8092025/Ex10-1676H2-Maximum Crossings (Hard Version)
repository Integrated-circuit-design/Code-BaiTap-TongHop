#include <stdio.h>
#include <string.h>

#define MAXN 200005
typedef long long ll;

int n;
int a[MAXN], temp[MAXN];

ll merge_count(int l, int r) {
    if (l >= r) return 0;
    int mid = (l + r) / 2;
    ll inv = 0;
    inv += merge_count(l, mid);
    inv += merge_count(mid + 1, r);

    int i = l, j = mid + 1, k = l;
    while (i <= mid && j <= r) {
        if (a[i] <= a[j]) {
            temp[k++] = a[i++];
        } else {
            temp[k++] = a[j++];
            inv += (mid - i + 1);
        }
    }
    while (i <= mid) temp[k++] = a[i++];
    while (j <= r) temp[k++] = a[j++];
    for (i = l; i <= r; i++) a[i] = temp[i];
    return inv;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        for (int i = 0; i < n; i++) scanf("%d", &a[i]);

        ll inversions = merge_count(0, n - 1);

        static int freq[MAXN];
        memset(freq, 0, sizeof(int) * (n + 2));
        for (int i = 0; i < n; i++) freq[a[i]]++;

        ll sameValuePairs = 0;
        for (int i = 1; i <= n; i++) {
            if (freq[i] > 1) {
                ll c = freq[i];
                sameValuePairs += c * (c - 1) / 2;
            }
        }

        printf("%lld\n", inversions + sameValuePairs);
    }
    return 0;
}

