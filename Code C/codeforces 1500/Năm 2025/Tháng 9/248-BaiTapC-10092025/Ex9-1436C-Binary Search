#include <stdio.h>
#define MOD 1000000007

long long modpow(long long a, long long b) {
    long long res = 1;
    while (b) {
        if (b & 1) res = res * a % MOD;
        a = a * a % MOD;
        b >>= 1;
    }
    return res;
}

long long comb(int n, int k) {
    if (k < 0 || k > n) return 0;
    long long num = 1, den = 1;
    for (int i = 0; i < k; i++) {
        num = num * (n - i) % MOD;
        den = den * (i + 1) % MOD;
    }
    return num * modpow(den, MOD - 2) % MOD;
}

long long fact(int n) {
    long long r = 1;
    for (int i = 1; i <= n; i++) r = r * i % MOD;
    return r;
}

int main() {
    int n, x, pos;
    scanf("%d %d %d", &n, &x, &pos);

    int smaller = x - 1, greater = n - x;
    int need_small = 0, need_great = 0;

    int l = 0, r = n;
    while (l < r) {
        int mid = (l + r) / 2;
        if (mid <= pos) {
            if (mid < pos) need_small++;
            l = mid + 1;
        } else {
            need_great++;
            r = mid;
        }
    }

    long long ans = 1;
    ans = ans * comb(smaller, need_small) % MOD;
    ans = ans * fact(need_small) % MOD;
    ans = ans * comb(greater, need_great) % MOD;
    ans = ans * fact(need_great) % MOD;
    ans = ans * fact(n - 1 - need_small - need_great) % MOD;

    printf("%lld\n", ans);
    return 0;
}

