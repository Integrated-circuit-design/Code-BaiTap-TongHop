#include <stdio.h>
#include <stdint.h>

#define MOD 1000000007

void mat_mul(int64_t a[3][3], int64_t b[3][3], int64_t res[3][3]) {
    int64_t temp[3][3] = {0};
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            for (int k = 0; k < 3; k++)
                temp[i][j] = (temp[i][j] + a[i][k] * b[k][j]) % MOD;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            res[i][j] = temp[i][j];
}

void mat_pow(int64_t base[3][3], int n, int64_t res[3][3]) {
    int64_t I[3][3] = {{1,0,0},{0,1,0},{0,0,1}};
    while (n > 0) {
        if (n % 2) mat_mul(I, base, I);
        mat_mul(base, base, base);
        n /= 2;
    }
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            res[i][j] = I[i][j];
}

int main() {
    int n;
    int64_t l, r;
    scanf("%d %lld %lld", &n, &l, &r);

    int64_t cnt[3];
    cnt[0] = (r / 3) - ((l - 1) / 3);
    cnt[1] = ((r + 2) / 3) - ((l + 1 - 1) / 3);
    cnt[2] = ((r + 1) / 3) - ((l + 2 - 1) / 3);

    int64_t M[3][3] = {
        {cnt[0], cnt[2], cnt[1]},
        {cnt[1], cnt[0], cnt[2]},
        {cnt[2], cnt[1], cnt[0]}
    };

    int64_t res[3][3];
    mat_pow(M, n, res);

    int64_t ans = res[0][0]; 
    printf("%lld\n", ans);
    return 0;
}

