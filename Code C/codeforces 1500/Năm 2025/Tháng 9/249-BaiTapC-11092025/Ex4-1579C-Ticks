#include <stdio.h>
#include <string.h>

#define MAXN 10
#define MAXM 19

int n, m, k;
char grid[MAXN][MAXM + 1];

int in_grid(int i, int j) {
    return i >= 0 && i < n && j >= 0 && j < m;
}

int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%d %d %d", &n, &m, &k);
        for(int i = 0; i < n; i++)
            scanf("%s", grid[i]);

        int ok = 1;

        int height[MAXN][MAXM];
        memset(height, 0, sizeof(height));

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == '*') {
                    if(in_grid(i-1,j-1) && in_grid(i-1,j+1))
                        height[i][j] = 1 + (height[i-1][j-1] < height[i-1][j+1] ? height[i-1][j-1] : height[i-1][j+1]);
                    else
                        height[i][j] = 1;
                }
            }
        }

        for(int i = n-1; i >= 0; i--) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == '*') {
                    int d = height[i][j] - 1;
                    if(d < k) {
                        int found = 0;
                        for(int x = i+1; x < n; x++) {
                            for(int y = 0; y < m; y++) {
                                int dd = height[x][y] - 1;
                                if(dd >= k && (x - dd <= i) && (i <= x) && (y - dd <= j) && (j <= y + dd)) {
                                    found = 1;
                                    break;
                                }
                            }
                            if(found) break;
                        }
                        if(!found) ok = 0;
                    }
                }
            }
        }

        printf("%s\n", ok ? "YES" : "NO");
    }
    return 0;
}

