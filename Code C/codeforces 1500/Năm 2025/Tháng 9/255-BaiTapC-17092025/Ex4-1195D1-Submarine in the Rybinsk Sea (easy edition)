#include <stdio.h>

#define MOD 998244353
#define MAXN 100000
#define MAXD 20

long long power10[2*MAXD+5];
long long digitSum[MAXD];
long long a[MAXN];

int countDigits(long long x) {
    int c = 0;
    while (x > 0) {
        c++;
        x /= 10;
    }
    return (c == 0 ? 1 : c);
}

void preparePowers(int m) {
    power10[0] = 1;
    for (int i = 1; i <= 2*m+1; i++) {
        power10[i] = (power10[i-1] * 10) % MOD;
    }
}

void computeDigitSums(int n, int m) {
    for (int i = 0; i < m; i++) digitSum[i] = 0;
    for (int i = 0; i < n; i++) {
        long long x = a[i];
        for (int k = 0; k < m; k++) {
            digitSum[k] += (x % 10);
            x /= 10;
        }
    }
}

long long solve(int n, int m) {
    long long ans = 0;
    for (int k = 0; k < m; k++) {
        long long Sk = digitSum[k] % MOD;
        long long term = (power10[2*k] + power10[2*k+1]) % MOD;
        ans = (ans + (Sk * term) % MOD) % MOD;
    }
    ans = (ans * (n % MOD)) % MOD;
    return ans;
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%lld", &a[i]);

    int m = countDigits(a[0]);
    preparePowers(m);
    computeDigitSums(n, m);

    long long ans = solve(n, m);
    printf("%lld\n", ans);

    return 0;
}

