#include <stdio.h>
#include <stdlib.h>

#define MAXN 1005
#define INF 1000000000

typedef struct { int x, y; } Point;

int r, c;
char grid[MAXN][MAXN];
int distS[MAXN][MAXN];
int visited[MAXN][MAXN];
int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

void dfs(int x, int y, int d) {
    if(x<0 || y<0 || x>=r || y>=c) return;
    if(grid[x][y]=='T') return;
    if(visited[x][y] && distS[x][y] <= d) return;
    visited[x][y] = 1;
    distS[x][y] = d;
    for(int k=0;k<4;k++){
        dfs(x+dx[k], y+dy[k], d+1);
    }
}

int distE[MAXN][MAXN];
typedef struct { int x, y; } Node;
Node queue[MAXN*MAXN];

void bfs_from_E(int ex, int ey) {
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
            distE[i][j] = INF;
    int front=0, back=0;
    queue[back++] = (Node){ex, ey};
    distE[ex][ey]=0;

    while(front<back){
        Node cur = queue[front++];
        int x = cur.x, y = cur.y;
        for(int k=0;k<4;k++){
            int nx=x+dx[k], ny=y+dy[k];
            if(nx<0||ny<0||nx>=r||ny>=c) continue;
            if(grid[nx][ny]=='T') continue;
            if(distE[nx][ny] > distE[x][y]+1){
                distE[nx][ny] = distE[x][y]+1;
                queue[back++] = (Node){nx, ny};
            }
        }
    }
}

int main(){
    scanf("%d %d",&r,&c);
    int sx, sy, ex, ey;
    for(int i=0;i<r;i++){
        scanf("%s",grid[i]);
        for(int j=0;j<c;j++){
            if(grid[i][j]=='S'){ sx=i; sy=j; }
            if(grid[i][j]=='E'){ ex=i; ey=j; }
        }
    }

    for(int i=0;i<r;i++) for(int j=0;j<c;j++) visited[i][j]=0;
    dfs(sx, sy, 0);

    bfs_from_E(ex, ey);

    int dExit = distS[ex][ey];
    long long battles=0;

    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            if(grid[i][j]>='0' && grid[i][j]<='9'){
                int b = grid[i][j]-'0';
                if(b>0 && distE[i][j]<=dExit){
                    battles += b;
                }
            }
        }
    }

    printf("%lld\n", battles);
    return 0;
}

