#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#define INF 1000000000000000000LL
typedef long long ll;

int n;
ll cost[100000];
char *str[100000], *rev[100000];
ll dp[100000][2];

char* reverse_string(const char* s) {
    int len = strlen(s);
    char* r = (char*)malloc(len + 1);
    for (int i = 0; i < len; i++) r[i] = s[len - 1 - i];
    r[len] = '\0';
    return r;
}

int leq(const char* a, const char* b) {
    return strcmp(a, b) <= 0;
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%lld", &cost[i]);

    char buf[100005];
    for (int i = 0; i < n; i++) {
        scanf("%s", buf);
        str[i] = strdup(buf);
        rev[i] = reverse_string(buf);
    }

    dp[0][0] = 0;
    dp[0][1] = cost[0];

    for (int i = 1; i < n; i++) {
        dp[i][0] = dp[i][1] = INF;

        if (dp[i-1][0] != INF && leq(str[i-1], str[i])) dp[i][0] = dp[i-1][0];
        if (dp[i-1][1] != INF && leq(rev[i-1], str[i]) && dp[i-1][1] < dp[i][0]) dp[i][0] = dp[i-1][1];

        if (dp[i-1][0] != INF && leq(str[i-1], rev[i])) dp[i][1] = dp[i-1][0] + cost[i];
        if (dp[i-1][1] != INF && leq(rev[i-1], rev[i]) && dp[i-1][1] + cost[i] < dp[i][1]) dp[i][1] = dp[i-1][1] + cost[i];
    }

    ll ans = dp[n-1][0] < dp[n-1][1] ? dp[n-1][0] : dp[n-1][1];
    if (ans >= INF) printf("-1\n");
    else printf("%lld\n", ans);

    for (int i = 0; i < n; i++) {
        free(str[i]);
        free(rev[i]);
    }

    return 0;
}

