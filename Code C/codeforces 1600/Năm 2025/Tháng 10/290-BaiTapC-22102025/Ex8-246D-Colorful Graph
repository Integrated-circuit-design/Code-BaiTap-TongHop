#include <stdio.h>
#include <stdlib.h>

#define MAXN 100005

typedef struct Node {
    int to;
    struct Node *next;
} Node;

Node *adj[MAXN];
int color[MAXN];
int cnt[100005];
int seen[100005];

void add_edge(int u, int v) {
    Node *p = (Node*)malloc(sizeof(Node));
    p->to = v;
    p->next = adj[u];
    adj[u] = p;
}

int max(int a, int b) {
    return a > b ? a : b;
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    for (int i = 1; i <= n; i++)
        scanf("%d", &color[i]);

    for (int i = 0; i < m; i++) {
        int a, b;
        scanf("%d %d", &a, &b);
        add_edge(a, b);
        add_edge(b, a);
    }

    for (int u = 1; u <= n; u++) {
        for (Node *p = adj[u]; p != NULL; p = p->next) {
            int v = p->to;
            if (color[v] != color[u]) {
                int colU = color[u];
                int colV = color[v];
                if (seen[colV] != colU) {
                    seen[colV] = colU;
                    cnt[colU]++;
                }
            }
        }
    }

    int bestColor = color[1];
    int bestValue = -1;

    for (int i = 1; i <= n; i++) {
        int c = color[i];
        if (cnt[c] > bestValue || (cnt[c] == bestValue && c < bestColor)) {
            bestValue = cnt[c];
            bestColor = c;
        }
    }

    printf("%d\n", bestColor);

    for (int i = 1; i <= n; i++) {
        Node *p = adj[i];
        while (p) {
            Node *tmp = p;
            p = p->next;
            free(tmp);
        }
    }

    return 0;
}

