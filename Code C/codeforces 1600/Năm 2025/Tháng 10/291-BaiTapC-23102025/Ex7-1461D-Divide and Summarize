#include <stdio.h>
#include <stdlib.h>

typedef long long ll;

typedef struct {
    ll sum;
    ll mn;
    ll mx;
} Node;

ll a[100005];

int cmp(const void *x, const void *y) {
    ll a = *(ll*)x;
    ll b = *(ll*)y;
    if(a < b) return -1;
    else if(a > b) return 1;
    return 0;
}

int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        int n, q;
        scanf("%d %d", &n, &q);
        for(int i = 0; i < n; i++) scanf("%lld", &a[i]);
        qsort(a, n, sizeof(ll), cmp);

        Node queue[500000]; 
        int head = 0, tail = 0;

        ll total = 0;
        for(int i = 0; i < n; i++) total += a[i];

        queue[tail++] = (Node){total, a[0], a[n-1]};

        int possible_size = 0;
        ll possible[500000];

        while(head < tail) {
            Node cur = queue[head++];
            possible[possible_size++] = cur.sum;

            if(cur.mn == cur.mx) continue;

            ll mid = (cur.mn + cur.mx) / 2;

            ll sum_left = 0, sum_right = 0;
            ll left_min = 1e9+7, left_max = 0;
            ll right_min = 1e9+7, right_max = 0;

            for(int i = 0; i < n; i++) {
                if(a[i] >= cur.mn && a[i] <= cur.mx) {
                    if(a[i] <= mid) {
                        sum_left += a[i];
                        if(a[i] < left_min) left_min = a[i];
                        if(a[i] > left_max) left_max = a[i];
                    } else {
                        sum_right += a[i];
                        if(a[i] < right_min) right_min = a[i];
                        if(a[i] > right_max) right_max = a[i];
                    }
                }
            }

            if(sum_left > 0) queue[tail++] = (Node){sum_left, left_min, left_max};
            if(sum_right > 0) queue[tail++] = (Node){sum_right, right_min, right_max};
        }

        qsort(possible, possible_size, sizeof(ll), cmp);

        while(q--) {
            ll s;
            scanf("%lld", &s);
            int l = 0, r = possible_size - 1;
            int found = 0;
            while(l <= r) {
                int m = (l + r) / 2;
                if(possible[m] == s) {
                    found = 1;
                    break;
                } else if(possible[m] < s) l = m + 1;
                else r = m - 1;
            }
            if(found) printf("Yes\n");
            else printf("No\n");
        }
    }
    return 0;
}

