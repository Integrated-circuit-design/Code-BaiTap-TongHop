#include <stdio.h>
#define N 1005
#define MAX(a,b) ((a)>(b)?(a):(b))

int g[N][N];
int upL[N][N], downR[N][N], upR[N][N], downL[N][N];

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j)
            scanf("%d", &g[i][j]);

    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j)
            upL[i][j] = g[i][j] + MAX(upL[i-1][j], upL[i][j-1]);

    for (int i = n; i >= 1; --i)
        for (int j = m; j >= 1; --j)
            downR[i][j] = g[i][j] + MAX(downR[i+1][j], downR[i][j+1]);

    for (int i = n; i >= 1; --i)
        for (int j = 1; j <= m; ++j)
            downL[i][j] = g[i][j] + MAX(downL[i+1][j], downL[i][j-1]);

    for (int i = 1; i <= n; ++i)
        for (int j = m; j >= 1; --j)
            upR[i][j] = g[i][j] + MAX(upR[i-1][j], upR[i][j+1]);

    int best = 0;

    for (int i = 2; i < n; ++i) {
        for (int j = 2; j < m; ++j) {
            int caseA = upL[i-1][j] + downR[i+1][j] + downL[i][j-1] + upR[i][j+1];
            int caseB = upL[i][j-1] + downR[i][j+1] + downL[i+1][j] + upR[i-1][j];
            int now = (caseA > caseB) ? caseA : caseB;
            if (now > best) best = now;
        }
    }

    printf("%d\n", best);
    return 0;
}

