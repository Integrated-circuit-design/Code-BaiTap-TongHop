#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

long long absolute(long long x) {
    if (x < 0) return -x;
    return x;
}

long long initial_sum(int a[], int n) {
    long long total = 0;
    for (int i = 1; i < n; i++)
        total += absolute((long long)a[i] - a[i - 1]);
    return total;
}

long long best_insert_cost(int a[], int n, int val) {
    long long best = LLONG_MAX;
    long long left = absolute((long long)a[0] - val);
    long long right = absolute((long long)a[n - 1] - val);
    if (left < best) best = left;
    if (right < best) best = right;
    for (int i = 1; i < n; i++) {
        long long current = absolute((long long)a[i] - a[i - 1]);
        long long add = absolute((long long)a[i] - val)
                      + absolute((long long)a[i - 1] - val)
                      - current;
        if (add < best) best = add;
    }
    return best;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n, x;
        scanf("%d %d", &n, &x);
        int a[200005];
        for (int i = 0; i < n; i++)
            scanf("%d", &a[i]);
        long long base = initial_sum(a, n);
        long long cost1 = best_insert_cost(a, n, 1);
        long long costx = best_insert_cost(a, n, x);
        printf("%lld\n", base + cost1 + costx);
    }
    return 0;
}

