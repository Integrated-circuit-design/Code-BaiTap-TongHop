#include <stdio.h>
#include <stdlib.h>

#define MAXN 100005

typedef struct {
    int color;
    int freq;
} ColorFreq;

int main() {
    int n;
    scanf("%d", &n);

    int* cats = (int*)malloc(n * sizeof(int));
    for(int i = 0; i < n; i++)
        scanf("%d", &cats[i]);

    int* freq = (int*)calloc(MAXN, sizeof(int));
    int* freqCounter = (int*)calloc(MAXN, sizeof(int));

    int maxFreq = 0;
    int result = 0;

    for(int i = 0; i < n; i++) {
        int c = cats[i];

        if(freq[c] > 0) freqCounter[freq[c]]--;

        freq[c]++;
        freqCounter[freq[c]]++;

        if(freq[c] > maxFreq) maxFreq = freq[c];

        int totalColors = 0;
        int singleFreq = 0, otherFreq = 0;
        for(int f = 1; f <= maxFreq; f++) {
            if(freqCounter[f] > 0) {
                totalColors++;
                if(singleFreq == 0) singleFreq = f;
                else otherFreq = f;
            }
        }

        int valid = 0;
        if(totalColors == 1) {
            if(singleFreq == 1 || freqCounter[singleFreq] == 1) valid = 1;
        } else if(totalColors == 2) {
            if((freqCounter[singleFreq] == 1 && (singleFreq - otherFreq == 1 || singleFreq == 1)) ||
               (freqCounter[otherFreq] == 1 && (otherFreq - singleFreq == 1 || otherFreq == 1)))
                valid = 1;
        }

        if(valid) result = i + 1;
    }

    printf("%d\n", result);

    free(cats);
    free(freq);
    free(freqCounter);

    return 0;
}

