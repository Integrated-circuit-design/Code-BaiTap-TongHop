#include <stdio.h>
#include <stdlib.h>

#define MAXN 200005
#define MAXK 200005

int parent[MAXN], color[MAXN], size[MAXN];
int head[MAXN], next[MAXN];
int freq[MAXK];

int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]);
    return parent[x];
}

void unite(int x, int y) {
    int px = find(x), py = find(y);
    if (px == py) return;
    if (size[px] < size[py]) {
        int tmp = px;
        px = py;
        py = tmp;
    }
    parent[py] = px;
    size[px] += size[py];
}

int main() {
    int n, m, k;
    scanf("%d %d %d", &n, &m, &k);

    for (int i = 1; i <= n; i++) {
        scanf("%d", &color[i]);
        parent[i] = i;
        size[i] = 1;
        head[i] = i;
        next[i] = 0;
    }

    for (int i = 0; i < m; i++) {
        int l, r;
        scanf("%d %d", &l, &r);
        unite(l, r);
    }

    for (int i = 1; i <= n; i++) {
        int root = find(i);
        if (root != i) {
            next[i] = head[root];
            head[root] = i;
        }
    }

    long long result = 0;

    for (int i = 1; i <= n; i++) {
        if (find(i) == i) {
            for (int c = 1; c <= k; c++) freq[c] = 0;

            int max_count = 0, comp_size = 0;
            for (int j = head[i]; j != 0; j = next[j]) {
                freq[color[j]]++;
            }
            freq[color[i]]++;

            for (int c = 1; c <= k; c++) {
                if (freq[c] > max_count) max_count = freq[c];
                comp_size += freq[c];
            }

            result += comp_size - max_count;
        }
    }

    printf("%lld\n", result);
    return 0;
}

