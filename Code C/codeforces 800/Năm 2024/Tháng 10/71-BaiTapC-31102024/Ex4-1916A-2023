#include <stdio.h>

#define MAX_FACTORS 4

long long calculate_product(int arr[], int size) {
    long long product = 1;
    for (int i = 0; i < size; i++) {
        product *= arr[i];
    }
    return product;
}

int find_missing_factors(int b[], int n, int k, int missing[]) {
    int factors[MAX_FACTORS] = {1, 7, 17, 289};
    long long product_b = calculate_product(b, n);

    if (k == 1) {
        for (int i = 0; i < MAX_FACTORS; i++) {
            if (product_b * factors[i] == 2023) {
                missing[0] = factors[i];
                return 1;
            }
        }
    } else if (k == 2) {
        for (int i = 0; i < MAX_FACTORS; i++) {
            for (int j = 0; j < MAX_FACTORS; j++) {
                if (product_b * factors[i] * factors[j] == 2023) {
                    missing[0] = factors[i];
                    missing[1] = factors[j];
                    return 2;
                }
            }
        }
    } else if (k == 3) {
        for (int i = 0; i < MAX_FACTORS; i++) {
            for (int j = 0; j < MAX_FACTORS; j++) {
                for (int l = 0; l < MAX_FACTORS; l++) {
                    if (product_b * factors[i] * factors[j] * factors[l] == 2023) {
                        missing[0] = factors[i];
                        missing[1] = factors[j];
                        missing[2] = factors[l];
                        return 3;
                    }
                }
            }
        }
    }

    return 0;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n, k;
        scanf("%d %d", &n, &k);

        int b[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &b[i]);
        }

        int missing[3];
        int found_count = find_missing_factors(b, n, k, missing);

        if (found_count > 0) {
            printf("YES\n");
            for (int i = 0; i < found_count; i++) {
                printf("%d ", missing[i]);
            }
            printf("\n");
        } else {
            printf("NO\n");
        }
    }
    return 0;
}

