#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAXN 50000
#define MAXM 50000

typedef struct Node {
    int post;
    struct Node *next;
} Node;

Node *head = NULL;
int removal_time[MAXN];
bool in_recent[MAXN + MAXM];

void insert_at_head(int post) {
    Node *new_node = (Node *)malloc(sizeof(Node));
    new_node->post = post;
    new_node->next = head;
    head = new_node;
}

void remove_last_and_insert(int post, int time, int n) {
    Node *current = head, *prev = NULL;

    while (current->next != NULL) {
        prev = current;
        current = current->next;
    }

    if (current->post <= n && removal_time[current->post - 1] == -1) {
        removal_time[current->post - 1] = time;
    }

    in_recent[current->post] = false;

    if (prev) {
        prev->next = NULL;
    } else {
        head = NULL;
    }

    free(current);

    insert_at_head(post);
    in_recent[post] = true;
}

void solve_recent_actions() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n, m;
        scanf("%d %d", &n, &m);

        head = NULL;
        for (int i = 0; i < n; i++) {
            insert_at_head(n - i);
            removal_time[i] = -1;
        }

        for (int i = 1; i <= n; i++) {
            in_recent[i] = true;
        }

        for (int i = 0; i < m; i++) {
            int post;
            scanf("%d", &post);

            if (in_recent[post]) {
                Node *current = head, *prev = NULL;

                while (current != NULL && current->post != post) {
                    prev = current;
                    current = current->next;
                }

                if (prev && current) {
                    prev->next = current->next;
                    current->next = head;
                    head = current;
                }
            } else {
                remove_last_and_insert(post, i + 1, n);
            }
        }

        for (int i = 0; i < n; i++) {
            if (i > 0) printf(" ");
            printf("%d", removal_time[i]);
        }
        printf("\n");

        while (head) {
            Node *temp = head;
            head = head->next;
            free(temp);
        }
    }
}

int main() {
    solve_recent_actions();
    return 0;
}
