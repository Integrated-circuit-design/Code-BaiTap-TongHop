#include <stdio.h>
#include <stdlib.h>

int can_sort_with_step_k(int n, int k, int p[]) {
    int groups[k][n];
    int group_size[k];
    
    for (int i = 0; i < k; i++) {
        group_size[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        groups[i % k][group_size[i % k]++] = p[i];
    }

    for (int i = 0; i < k; i++) {
        for (int j = 0; j < group_size[i] - 1; j++) {
            for (int l = j + 1; l < group_size[i]; l++) {
                if (groups[i][j] > groups[i][l]) {
                    int temp = groups[i][j];
                    groups[i][j] = groups[i][l];
                    groups[i][l] = temp;
                }
            }
        }
    }

    int sorted_p[n];
    for (int i = 0; i < n; i++) {
        sorted_p[i] = groups[i % k][--group_size[i % k]];
    }

    for (int i = 0; i < n; i++) {
        if (sorted_p[i] != i + 1) {
            return 0;
        }
    }
    return 1;
}

int check_preliminary_swap(int n, int k, int p[]) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int temp = p[i];
            p[i] = p[j];
            p[j] = temp;

            if (can_sort_with_step_k(n, k, p)) {
                return 1;
            }

            p[i] = temp;
            p[j] = p[i];
        }
    }
    return 0;
}

void solve() {
    int t;
    scanf("%d", &t);
    
    while (t--) {
        int n, k;
        scanf("%d %d", &n, &k);
        int p[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &p[i]);
        }

        if (can_sort_with_step_k(n, k, p)) {
            printf("0\n");
        } else {
            if (check_preliminary_swap(n, k, p)) {
                printf("1\n");
            } else {
                printf("-1\n");
            }
        }
    }
}

int main() {
    solve();
    return 0;
}

