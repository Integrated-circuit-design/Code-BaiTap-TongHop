#include <stdio.h>
#include <stdlib.h>

#define MOD 1000000007
#define MAX_N 100000

long long beauty_sum[MAX_N + 1];

long long count_inversions(long long *arr, int n) {
    long long inversions = 0;
    
    long long *temp = (long long *)malloc(n * sizeof(long long));
    for (int i = 0; i < n; i++) {
        temp[i] = arr[i];
    }

    for (int step = 1; step < n; step *= 2) {
        for (int i = 0; i < n; i += 2 * step) {
            int left = i;
            int right = i + step;
            int end = (i + 2 * step < n) ? i + 2 * step : n;
            int k = left;
            
            while (left < right && right < end) {
                if (arr[left] <= arr[right]) {
                    temp[k++] = arr[left++];
                } else {
                    temp[k++] = arr[right++];
                    inversions += (right - left);
                }
            }
            while (left < right) {
                temp[k++] = arr[left++];
            }
            while (right < end) {
                temp[k++] = arr[right++];
            }
        }
    }
    
    free(temp);
    return inversions;
}

void precompute() {
    beauty_sum[0] = 0;
    beauty_sum[1] = 0;

    for (int n = 2; n <= MAX_N; n++) {
        long long total_inversions = 0;
        long long *p = (long long *)malloc(2 * n * sizeof(long long));

        for (int i = 0; i < n; i++) {
            p[i] = i + 1;
        }
        for (int i = 0; i < n; i++) {
            p[n + i] = p[n - i - 1];
        }

        total_inversions = count_inversions(p, 2 * n);
        beauty_sum[n] = total_inversions % MOD;
        free(p);
    }
}

int main() {
    int t;
    scanf("%d", &t);
    
    precompute();
    
    while (t--) {
        int n;
        scanf("%d", &n);
        
        printf("%lld\n", beauty_sum[n]);
    }

    return 0;
}

